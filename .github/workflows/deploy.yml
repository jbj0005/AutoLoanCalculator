name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Preflight – verify Supabase env
        run: |
          set -euo pipefail
          missing=0
          for v in VITE_SUPABASE_URL VITE_SUPABASE_ANON_KEY; do
            if [ -z "${!v}" ]; then
              echo "ERROR: Missing $v. Add it under Settings → Secrets and variables → Actions." >&2
              missing=1
            else
              echo "$v=present"
            fi
          done
          # 1) URL should look valid
          case "$VITE_SUPABASE_URL" in
            https://*.supabase.co) : ;;
            *) echo "ERROR: VITE_SUPABASE_URL should look like https://<ref>.supabase.co" >&2; missing=1 ;;
          esac
          # 2) If the key is a JWT, ensure it's NOT service_role (anon or publishable is OK)
          #    Also print a non-blocking diagnostic for key length and dot segments
          segcount=$(printf '%s' "$VITE_SUPABASE_ANON_KEY" | awk -F. '{print NF-1}') || segcount=0
          keylen=$(printf '%s' "$VITE_SUPABASE_ANON_KEY" | wc -c | tr -d ' ')
          echo "Supabase key: segments(dots)=$segcount length(chars)=$keylen"
          if [ "$segcount" -ge 2 ]; then echo "Key looks JWT-like"; else echo "Key looks publishable/non-JWT"; fi
          payload=$(printf '%s' "$VITE_SUPABASE_ANON_KEY" | awk -F. '{print $2}') || payload=""
          if [ -n "$payload" ]; then
            # URL-safe base64 decode with padding
            b64=$(printf '%s' "$payload" | tr '_-' '/+')
            mod=$(( ${#b64} % 4 ))
            if [ "$mod" -eq 2 ]; then b64="${b64}=="; elif [ "$mod" -eq 3 ]; then b64="${b64}="; fi
            decoded=$(printf '%s' "$b64" | base64 -d 2>/dev/null || true)
            role=$(printf '%s' "$decoded" | sed -n 's/.*"role"\s*:\s*"\([^"]*\)".*/\1/p')
            if [ -n "$role" ]; then
              echo "JWT role=$role"
              if [ "$role" = "service_role" ]; then
                echo "ERROR: Supabase key role is service_role. Use anon/publishable key in the client." >&2
                missing=1
              fi
            else
              echo "WARN: Could not decode JWT role; continuing (publishable keys may not be JWTs)" >&2
            fi
          else
            echo "INFO: Key does not appear to be a JWT; assuming publishable client key and continuing" >&2
          fi
          if [ "$missing" -ne 0 ]; then
            exit 1
          fi
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Compute GitHub Pages base path
        run: |
          if [ -z "${VITE_BASE:-}" ]; then
            REPO_NAME="${GITHUB_REPOSITORY#*/}"
            echo "VITE_BASE=/${REPO_NAME}/" >> "$GITHUB_ENV"
            echo "Computed VITE_BASE=/${REPO_NAME}/"
          else
            echo "Using provided VITE_BASE=${VITE_BASE}"
            echo "VITE_BASE=${VITE_BASE}" >> "$GITHUB_ENV"
          fi
        env:
          VITE_BASE: ${{ vars.VITE_BASE }}

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          # Base path for GitHub Pages. Prefer repository variable; fallback computed from repo name.
          VITE_BASE: ${{ env.VITE_BASE }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
