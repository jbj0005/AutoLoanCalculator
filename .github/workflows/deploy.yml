name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Preflight â€“ read .env.production (no secrets)
        run: |
          set -euo pipefail
          if [ ! -f .env.production ]; then
            echo "WARN: .env.production not found. Build will proceed without injected env (app may rely on window.*)."
            exit 0
          fi
          # Extract values from .env.production
          URL=$(grep -E '^VITE_SUPABASE_URL=' .env.production | head -n1 | cut -d'=' -f2- || true)
          KEY=$(grep -E '^VITE_SUPABASE_ANON_KEY=' .env.production | head -n1 | cut -d'=' -f2- || true)
          if [ -z "${URL:-}" ] || [ -z "${KEY:-}" ]; then
            echo "WARN: One or both values missing in .env.production (VITE_SUPABASE_URL / VITE_SUPABASE_ANON_KEY)."
          fi
          echo "VITE_SUPABASE_URL present: $([ -n "${URL:-}" ] && echo yes || echo no)"
          segcount=$(printf '%s' "${KEY:-}" | awk -F. '{print NF-1}') || segcount=0
          keylen=$(printf '%s' "${KEY:-}" | wc -c | tr -d ' ')
          echo "Supabase key: segments(dots)=$segcount length(chars)=$keylen"
          if [ "$segcount" -ge 2 ]; then echo "Key looks JWT-like"; else echo "Key looks publishable/non-JWT"; fi
          # If JWT, block service_role only
          if [ "$segcount" -ge 2 ]; then
            payload=$(printf '%s' "$KEY" | awk -F. '{print $2}') || payload=""
            if [ -n "$payload" ]; then
              b64=$(printf '%s' "$payload" | tr '_-' '/+')
              mod=$(( ${#b64} % 4 ))
              if [ "$mod" -eq 2 ]; then b64="${b64}=="; elif [ "$mod" -eq 3 ]; then b64="${b64}="; fi
              decoded=$(printf '%s' "$b64" | base64 -d 2>/dev/null || true)
              role=$(printf '%s' "$decoded" | sed -n 's/.*"role"\s*:\s*"\([^"]*\)".*/\1/p')
              if [ -n "$role" ]; then
                echo "JWT role=$role"
                if [ "$role" = "service_role" ]; then
                  echo "ERROR: Supabase key role is service_role. Use anon/publishable key in the client." >&2
                  exit 1
                fi
              fi
            fi
          fi

      - name: Compute GitHub Pages base path
        run: |
          if [ -z "${VITE_BASE:-}" ]; then
            REPO_NAME="${GITHUB_REPOSITORY#*/}"
            echo "VITE_BASE=/${REPO_NAME}/" >> "$GITHUB_ENV"
            echo "Computed VITE_BASE=/${REPO_NAME}/"
          else
            echo "Using provided VITE_BASE=${VITE_BASE}"
            echo "VITE_BASE=${VITE_BASE}" >> "$GITHUB_ENV"
          fi
        env:
          VITE_BASE: ${{ vars.VITE_BASE }}

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          # Base path for GitHub Pages. Prefer repository variable; fallback computed from repo name.
          VITE_BASE: ${{ env.VITE_BASE }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
